{"version":3,"file":"static/js/434.c37a60fe.chunk.js","mappings":"kPAgCA,EA3BgB,WACZ,IACA,ECJ2B,SAAAA,GAC3B,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAgBL,GAASM,MAAK,SAAAC,GAAI,OAAIJ,EAAgBI,EAApB,GACrC,GAAE,CAACP,IAEG,CAAEE,aAAAA,EACZ,CDJ4BM,EADLC,EAAAA,EAAAA,MAAZT,SACAE,EAAR,EAAQA,aAER,OACI,2BAC8B,KAAb,OAAZA,QAAY,IAAZA,OAAA,EAAAA,EAAcQ,UACX,qEAEJ,SAAC,KAAD,UACKR,EAAaS,KAAI,SAAAC,GACd,OACI,2BACI,0BAAG,mCAAH,IAAmBA,EAAOC,WAC1B,uBAAID,EAAOE,YAFNF,EAAOG,GAKvB,QAIhB,C,mMExBDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,4CAECC,EAAW,mCAAG,oGACLF,EAAAA,EAAAA,IAAA,6BAAgCC,IAD3B,cACjBE,EADiB,yBAEhBA,EAAIZ,KAAKa,QAAQT,KAAI,YACxB,MAAO,CAAEI,GADiC,EAAfA,GACdM,MAD6B,EAAXA,MAElC,KAJsB,2CAAH,qDAOXC,EAAY,mCAAG,WAAMC,GAAN,uFACNP,EAAAA,EAAAA,IAAA,uBAA0BC,EAA1B,kBAAuCM,EAAvC,2BADM,cAClBJ,EADkB,yBAEjBA,EAAIZ,KAAKa,QAAQT,KAAI,YACxB,MAAO,CAAEI,GADgC,EAAdA,GACdM,MAD4B,EAAVA,MAElC,KAJuB,2CAAH,sDAOZG,EAAe,mCAAG,WAAMxB,GAAN,uFACTgB,EAAAA,EAAAA,IAAA,iBAAoBhB,GAApB,OAA8BiB,EAA9B,oBADS,cACrBE,EADqB,yBAEpBA,EAAIZ,MAFgB,2CAAH,sDAKfkB,EAAe,mCAAG,WAAMzB,GAAN,uFACTgB,EAAAA,EAAAA,IAAA,iBAAoBhB,EAApB,mBAAsCiB,EAAtC,oBADS,cACrBE,EADqB,yBAEpBA,EAAIZ,KAAKmB,KAAKf,KAAI,YACrB,MAAO,CAAEgB,KADqD,EAAtCA,KACTC,UAD+C,EAAhCA,UACJC,aADoC,EAArBA,aACDd,GADsB,EAAPA,GAE1D,KAJ0B,2CAAH,sDAOfV,EAAe,mCAAE,WAAML,GAAN,uFACRgB,EAAAA,EAAAA,IAAA,iBAAoBhB,EAApB,mBAAsCiB,EAAtC,2BADQ,cACpBE,EADoB,yBAEnBA,EAAIZ,KAAKa,QAAQT,KAAI,YACxB,MAAO,CAAEE,OAD0C,EAAxBA,OACVC,QADkC,EAAhBA,QACTC,GADyB,EAAPA,GAE/C,KAJyB,2CAAF,qD","sources":["components/Reviews/Reviews.jsx","utils/hooks/useMovieReviews.jsx","utils/api/fetchMovies.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useMovieReviews } from 'utils/hooks/useMovieReviews';\nimport PropTypes from 'prop-types';\nimport {List} from '../App.styled'\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const { movieReviews } = useMovieReviews(movieId);\n\n    return (\n        <div>\n            {movieReviews?.length === 0 && (\n                <p>We don't have any reviews at this moment</p>\n            )}\n            <List>\n                {movieReviews.map(review => {\n                    return (\n                        <li key={review.id}>\n                            <p><b>Author:</b> {review.author}</p>\n                            <p>{review.content}</p>\n                        </li>\n                    );\n                })}\n            </List>\n        </div>\n    )\n}\n\nReviews.propTypes = {\n    movieId: PropTypes.string.isRequired\n}\n\nexport default Reviews;","import { getMovieReviews } from '../api/fetchMovies';\nimport { useState, useEffect } from 'react';\n\nexport const useMovieReviews = movieId => {\n    const [movieReviews, setMovieReviews] = useState([]);\n\n    useEffect(() => {\n        getMovieReviews(movieId).then(data => setMovieReviews(data));\n    }, [movieId]);\n\n    return { movieReviews };\n}","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\nconst KEY = '?api_key=65f73936914e96331bea5b0c7cf2b569';\n\nexport const getTrending = async () => {\n    const res = await axios.get(`/trending/movie/day${KEY}`);\n    return res.data.results.map(({ id, title })=> {\n        return { id, title }\n    })\n};\n\nexport const searchMovies = async search => {\n    const res = await axios.get(`/search/movie${KEY}&query=${search}&language=en-US&page=1`);\n    return res.data.results.map(({ id, title })=>{\n        return { id, title };\n    })\n}\n\nexport const getMovieDetails = async movieId => {\n    const res = await axios.get(`/movie/${movieId}${KEY}&language=en-US`);\n    return res.data;\n}\n\nexport const getMovieCredits = async movieId => {\n    const res = await axios.get(`/movie/${movieId}/credits${KEY}&language=en-US`);\n    return res.data.cast.map(({ name, character, profile_path, id })=>{\n        return { name, character, profile_path, id };\n    })\n}\n\nexport const getMovieReviews= async movieId => {\n    const res = await axios.get(`/movie/${movieId}/reviews${KEY}&language=en-US&page=1`);\n    return res.data.results.map(({ author, content, id })=>{\n        return { author, content, id  };\n    })\n}"],"names":["movieId","useState","movieReviews","setMovieReviews","useEffect","getMovieReviews","then","data","useMovieReviews","useParams","length","map","review","author","content","id","axios","KEY","getTrending","res","results","title","searchMovies","search","getMovieDetails","getMovieCredits","cast","name","character","profile_path"],"sourceRoot":""}